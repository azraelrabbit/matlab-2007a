function schema
    % 1 9
    % 2 9
    % 3 9
    % 4 9
    % 5 9
    % 6 9
    % 7 9
    pkg = findpackage('rptgen_sf');
    pkgRG = findpackage('rptgen');
    % 10 12
    h = schema.class(pkg, 'csf_obj_loop', pkgRG.findclass('rpt_looper'));
    % 12 14
    lic = 'SIMULINK_Report_Gen';
    % 14 17
    % 15 17
    termTypes = listTerminalTypes(rptgen_sf.appdata_sf);
    % 17 19
    for i=1.0:length(termTypes)
        p = rptgen.prop(h, horzcat('isReport', termTypes{i}), 'bool', true, sprintf('Report on "%s" objects', termTypes{i}), lic);
        % 20 22
    end % for
    % 22 25
    % 23 25
    p = rptgen.prop(h, 'Depth', vertcat(cellhorzcat('local', xlate('Local children only')), cellhorzcat('deep', xlate('All objects'))), 'local', xlate('Report depth'), lic);
    % 25 31
    % 26 31
    % 27 31
    % 28 31
    % 29 31
    p = rptgen.prop(h, 'RemoveRedundant', 'bool', false, xlate('Remove objects which do not contain more information than a snapshot'), lic);
    % 31 35
    % 32 35
    % 33 35
    p = rptgen.prop(h, 'SkipAutogenerated', 'bool', true, xlate('Skip autogenerated charts under truth tables'), lic);
    % 35 39
    % 36 39
    % 37 39
    p = rptgen.prop(h, 'isSFFilterList', 'bool', false, xlate('Search Stateflow:'), lic);
    % 39 43
    % 40 43
    % 41 43
    p = rptgen.prop(h, 'SFFilterTerms', 'string vector', {'Tag','MyTag'}, '', lic);
    % 43 45
    p.Visible = 'off';
    % 45 48
    % 46 48
    p = rptgen.prop(h, 'LockType', 'bool', false, '');
    % 48 50
    p.AccessFlags.PublicSet = 'off';
    p.AccessFlags.PublicGet = 'off';
    p.Visible = 'off';
    % 52 64
    % 53 64
    % 54 64
    % 55 64
    % 56 64
    % 57 64
    % 58 64
    % 59 64
    % 60 64
    % 61 64
    % 62 64
    rptgen.makeStaticMethods(h, {}, {'loop_getContextString';'loop_getLoopObjects';'loop_getObjectType';'loop_getPropSrc';'loop_restoreState';'loop_saveState';'loop_setState'});
    % 64 76
    % 65 76
    % 66 76
    % 67 76
    % 68 76
    % 69 76
    % 70 76
    % 71 76
    % 72 76
    % 73 76
    % 74 76
    p = rptgen.prop(h, 'isReportNote', 'bool', false, '', lic);
    % 76 78
    p.AccessFlags.Serialize = 'off';
    p.AccessFlags.Copy = 'off';
    p.AccessFlags.Init = 'off';
    p.AccessFlags.AbortSet = 'off';
    p.GetFunction = @getReportNote;
    p.SetFunction = @setReportNote;
    p.Visible = 'off';
function returnedValue = getReportNote(this, storedValue)
    % 85 91
    % 86 91
    % 87 91
    % 88 91
    % 89 91
    returnedValue = get(this, 'isReportAnnotation');
function valueStored = setReportNote(this, proposedValue)
    % 92 98
    % 93 98
    % 94 98
    % 95 98
    % 96 98
    set(this, 'isReportAnnotation', proposedValue);
    valueStored = '';
