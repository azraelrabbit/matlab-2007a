function [nDown, isAll] = hierDown(this, thisNode)
    % 1 10
    % 2 10
    % 3 10
    % 4 10
    % 5 10
    % 6 10
    % 7 10
    % 8 10
    isAll = true;
    if isa(thisNode, 'Simulink.Root') || isa(thisNode, 'Stateflow.Root')
        nDown = find(thisNode, '-isa', 'Stateflow.Machine');
    else
        if isa(thisNode, 'Stateflow.Machine')
            nDown = find(thisNode, '-isa', 'Stateflow.Chart');
            cDown = rptgen_ud.getChildren(thisNode);
            nDown = locGroupChildren(this, vertcat(cDown(:), nDown(:)));
        else
            if isa(thisNode, 'Stateflow.Object')
                nDown = rptgen_ud.getChildren(thisNode);
                nDown = locGroupChildren(this, nDown);
            else
                nDown = [];
                isAll = false;
            end
        end
    end
end
function nDown = locGroupChildren(this, nDown)
    if isempty(nDown)
        return
    end
    groupTypes = listTerminalTypes(rptgen_sf.appdata_sf);
    if this.SkipAutogenerated
        % 34 36
        filterTerms = cellhorzcat('-function', @isNotAutogenerated);
    else
        filterTerms = {};
    end
    % 39 41
    nDownCell = {};
    for i=1.0:length(groupTypes)
        foundTypes = find(nDown, '-depth', 0.0, '-isa', horzcat('Stateflow.', groupTypes{i}));
        % 43 46
        % 44 46
        if not(isempty(foundTypes))
            nDown = setdiff(nDown, foundTypes);
            switch groupTypes{i}
            case {'Transition','Junction'}
                switch get(this, horzcat('Show', groupTypes{i}, 's'))
                case 'all'
                    if not(isempty(filterTerms))
                        foundTypes = find(foundTypes, '-depth', 0.0, filterTerms{:});
                        % 53 56
                        % 54 56
                    end
                case 'informative'
                    foundTypes = find(foundTypes, '-depth', 0.0, {{'-not','Description',''};'-or';{'-not','Document',''};'-or';{'-not','LabelString','?'}}, filterTerms{:});
                    % 59 65
                    % 60 65
                    % 61 65
                    % 62 65
                    % 63 65
                case 'nonredundant'
                    % 64 66
                    foundTypes = find(foundTypes, '-depth', 0.0, {{'-not','Description',''};'-or';{'-not','Document',''}}, filterTerms{:});
                    % 67 71
                    % 68 71
                    % 69 71
                case 'labeled'
                    % 70 72
                    foundTypes = find(foundTypes, '-depth', 0.0, {'-not','LabelString','?'});
                case 'none'
                    % 73 75
                    foundTypes = [];
                end
            case 'Data'
                if not(isempty(filterTerms))
                    foundTypes = find(foundTypes, '-depth', 0.0, filterTerms{:});
                    % 79 82
                    % 80 82
                end
                % 82 87
                % 83 87
                % 84 87
                % 85 87
            end
            % 87 89
            if not(isempty(foundTypes))
                thisCell = createElement(this.RuntimeDocument, 'simpara', groupTypes{i}, ': ');
                for j=1.0:minus(length(foundTypes), 1.0)
                    thisCell.appendChild(makeLinkScalar(this.RuntimePropSrc, foundTypes(j), '', 'link', this.RuntimeDocument));
                    % 92 98
                    % 93 98
                    % 94 98
                    % 95 98
                    % 96 98
                    thisCell.appendChild(this.RuntimeDocument.createTextNode(', '));
                end % for
                thisCell.appendChild(makeLinkScalar(this.RuntimePropSrc, foundTypes(end), '', 'link', this.RuntimeDocument));
                % 100 106
                % 101 106
                % 102 106
                % 103 106
                % 104 106
                nDownCell{plus(end, 1.0)} = thisCell;
            end
        end
    end % for
    % 109 111
    dcLength = length(nDownCell);
    if gt(dcLength, 0.0)
        for i=1.0:length(nDown)
            % 113 115
            if ~(this.SkipAutogenerated && not(rptgen_sf.isNotAutogenerated(nDown(i))))
                nDownCell{plus(end, 1.0)} = nDown(i);
            end
        end % for
        nDown = nDownCell;
    end
end
function tf = isNotAutogenerated(sfID)
    % 122 128
    % 123 128
    % 124 128
    % 125 128
    % 126 128
    tf = rptgen_sf.isNotAutogenerated(sfID);
end
